# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Модуль random ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Модуль random предоставляет функции для генерации случайных чисел, букв и случайного выбора элементов
# последовательности (списка, строки и т.д.).

# Функция randint() ====================================================================================================
# Функция randint() принимает два обязательных аргумента a и b и возвращает случайное целое число из отрезка [a;b].
import random

num1 = random.randint(0, 17)
num2 = random.randint(-5, 5)

print(num1)  # случайное число от 0 и до 17 включительно
print(num2)  # случайное число от -5 и до 5 включительно

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

for _ in range(10):
    print(random.randint(1, 100))  # 10 случайных чисел в диапазоне 1:100

# Функция randrange() ==================================================================================================
# Функция randrange() принимает такие же аргументы, что и функция range().
# Различие состоит в том, что функция randrange() не возвращает саму последовательность чисел.
# Вместо этого она возвращает случайно выбранное число из последовательности чисел.

num3 = random.randrange(10)  # случайное число в диапазоне от 0 до 9
num4 = random.randrange(5, 10)  # случайное число в диапазоне от 5 до 9
num5 = random.randrange(0, 101, 10)  # случайное число из последовательности
# чисел: 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100


# Функция random() =====================================================================================================
# функция random() возвращает случайное число с плавающей точкой (вещественное число) в диапазоне
# от 0.0 до 1.0 (исключая 1.0). В функцию random() никаких аргументов не передается.

num6 = random.random()
print(num6)

# Функция uniform() ====================================================================================================
# Функция uniform() тоже возвращает случайное число с плавающей точкой, но при этом она позволяет задавать диапазон
# для отбора значений.

num7 = random.uniform(1.5, 17.3)
print(num7)

# Функцию seed() =======================================================================================================
# !!! ГЕНЕРАЦИЯ ЧИСЕЛ ПРОИХОДИТ ПО ФОРМУЛЕ, ИМЕЮЩЕЕ НАЧАЛЬНОЕ ЗНАЧЕНИЕ - ТЕКУЩЕЕ ВРЕМЯ (ДО ОДНОЙ СОТОЙ СЕКУНДЫ)
# Могут иметься некоторые программы, где требуется всегда генерировать одну и ту же последовательность случайных чисел.
# При необходимости для этого можно вызвать функцию seed(), задав начальное значение.

random.seed(17)  # явно устанавливаем начальное значение для генератора случайных чисел

for _ in range(10):
    print(random.randint(1, 100))


# Вывод всегда одной и той же последовательности:
# 67
# 54
# 39
# 47
# 38
# 23
# 99
# 91
# 91
# 70

# Примечания:
# Примечание 1. Подключение модуля следующим образом:
# from random import *
# позволяет в дальнейшем не писать название модуля и символ точки при вызове функций модуля.

# Примечание 2. Функции модуля random на самом деле являются методами одноименного класса random.

# Примечание 3. Функция randint() реализована на основе функции randrange() следующим образом:
# Return random integer in range [a, b], including both end points.
def randint(self, a, b):
    return self.randrange(a, b + 1)


# Функция shuffle() ====================================================================================================
# Функция shuffle() принимает список в качестве обязательного аргумента и перемешивает его случайным образом.

numbers = [1, 2, 3, 4, 5, 6, 7, 8]
random.shuffle(numbers)
print(numbers)

# Функция choice() =====================================================================================================
# Функция choice() принимает список (строку, кортеж) в качестве обязательного аргумента и возвращает один случайный
# элемент из переданного списка (строки).

print(random.choice('BEEGEEK'))  # случайный один элемент из строки
print(random.choice([1, 2, 3, 4]))  # случайный один элемент из списка
print(random.choice(['a', 'b', 'c', 'd']))  # случайный один элемент из списка строк

# Функция sample() =====================================================================================================
# Функция sample() принимает два обязательных аргумента: список (строка, кортеж, множество) и количество случайных
# элементов, а возвращает список уникальных случайных элементов в указанном количестве.

numbers2 = [2, 5, 8, 9, 12]

print(random.sample(numbers2, 1))
print(random.sample(numbers2, 2))
print(random.sample(numbers2, 3))
print(random.sample(numbers2, 5))

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Monte Carlo method:

# Вычисление площадей:
# Алгоритм Монте-Карло:
# Пример 1. Рассмотрим фигуру, множество точек которой определяется следующей системой неравенств:
# 0 <= x <= 1
# 0 <= y <= 1
# y <= x ** 2

# Площадь такой фигуры S = (3 / 1) == 0.33333 (считается через интеграл)

# Площадь искомой фигуры составляет часть квадрата со сторонами 1.
# Площадь такого квадрата равна 1

n = 1000
k = 0
s0 = 1
for _ in range(n):
    x = random.uniform(0, 1)  # случайное число с плавающей точкой от 0 до 1
    y = random.uniform(0, 1)  # случайное число с плавающей точкой от 0 до 1

    if y <= x ** 2:  # если попадает в нужную область
        k += 1

print((k / n) * s0)  # 0.346

# Пример 2. Рассмотрим фигуру, множество точек которой определяется следующей системой неравенств:
# -2 <= x <= -2
# -2 <= y <= -2
# y ** 3 - 2 * x ** 2 <= -1
# 2 * y + x ** 3 <= 3

n = 1000
k = 0
s0 = 16
for _ in range(n):
    x = random.uniform(-2, 2)
    y = random.uniform(-2, 2)

    if y ** 3 - 2 * x ** 2 <= -1 and 2 * y + x ** 3 <= 3:
        k += 1

print((k / n) * s0)  # 8.896

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import random

n = 10**6
k = 0
s0 = 4
for _ in range(n):
    x = random.uniform(-1, 1)
    y = random.uniform(-1, 1)

    if x**2 + y**2 <= 1:
        k += 1

print((k / n) * s0)


