# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Модуль math ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Стандартный импорт модуля: (Пример: Модуль math)
import math

print(math.pi)  # 3.141592653589793

# Импорт всех модулей из библиотеки math (обращения к функциям модуля без указания модуля):
from math import *

print(pi)  # 3.141592653589793

# Переименование библиотеки, для обращения по указанному имени:
import math as m

print(m.pi)  # 3.141592653589793

# Переименование функции импортированного модуля, по указанному имени:
from math import pi as PI

print(PI)  # 3.141592653589793

# Модуль math обеспечивает доступ к математическим функциям, определенным стандартом языка C.
# Данный модуль не поддерживает операции с комплексными числами и всегда вызывает исключение при их использовании.


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Список наиболее часто используемых функций модуля:
# int(x)                  # Округляет число в сторону нуля;
# round(x)                # Округляет число до ближайшего целого (0.5 == 0, 0.6 == 1);
# round(x, arg)           # Округляет число до кол-ва знаков после точки.

# Округления чисел:
# math.floor(x)           # Округляет число до целого в меньшую сторону;
# math.ceil(x)            # Округляет число до целого в большую сторону;
# math.trunc(x)           # Округляет число (отбрасывая дробную часть).


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Степенные и логарифмические функции модуля модуля:
# math.sqrt(x)            # Возвращает (float) квадратный корень числа x. (Альтернатива x ** 0.5).;
# math.pow(x, y)          # Возвращает (float) x в степени y (Альтернатива x ** y (Возвращает int)).;
# math.cbrt(x)            # Возвращает (float) кубический корень из числа x.;
# math.log(x[, base])     # Возвращает логарифм числа x по основанию base.;
#                           Если аргумент base не указан, то возвращается натуральный логарифм числа x.;
# math.log10(x)           # Возвращает десятичный логарифм числа x,
#                           вычисление которого происходит немного точнее, чем math.log(x, 10).


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Функции теории чисел модуля:
# math.factorial(x)       # Возвращает факториал указанного числа x.;
# math.gcd(*integers)     # Возвращает наибольший общий делитель указанных целочисленных аргументов *integers.;
# math.fabs(x)            # Возвращает абсолютное значение, модуль числа x.;
# math.fmod(x, x)         # Возвращает остаток от деления числа x на число y.;
# math.modf(x)            # Возвращает кортеж из двух чисел (f, w) где f это дробная, а w - целая часть числа x.;
# math.fsum(iterable)     # Возвращает точную сумму значений в итерируемой последовательности iterable.;
# math.sumprod(p, q)      # Возвращает сумму произведений значений двух итераций p и q.;
# math.prod(iterable)     # Возвращает произведение последовательности.


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Тригонометрические функции модуля:
# math.degrees(x)         # Преобразует угол x из радиан в градусы.
# math.radians(x)         # Преобразует угол x из градусов в радианы.;

# math.cos(x)             # Возвращает косинус угла x значение которого задано в радианах.;
# math.sin(x)             # Возвращает синус угла x значение которого задано в радианах.;
# math.tan(x)             # Возвращает тангенс угла x значение которого задано в радианах.;
# math.acos(x)            # Возвращает арккосинус значения x, т. е. возвращает такое значение угла y,
#                           выраженного в радианах, при котором cos(y) = x.;
# math.asin(x)            # Возвращает арксинус значения x, т.е. такое значение угла y,
#                           выраженного в радианах при котором sin(y) = x.;
# math.atan2(x)           # Возвращает арктангенс значения x, т. е. возвращает такое значение угла y,
#                           выраженного в радианах, при котором tan(y) = x.

# π = 3.141592653589793
# error = 2.718281828459045(константа Эйлера)

# Поиск Дискриминанты числа:
if __name__ == '__main__':
    a = int(input())
    b = int(input())
    c = int(input())

    d = b * b - 4 * a * c  # формула Дискриминанты
    if d > 0:
        x1 = (-b + math.sqrt(d)) / (2 * a)  # ((-b + d*d) / 2*a)  # вычисление корня 1
        x2 = (-b - math.sqrt(d)) / (2 * a)  # ((-b - d*d) / 2*a)  # вычисление корня 2

        print(f'x1 = {x1} x2 = {x2}')
    elif d < 0:
        print('Нет корней!')
    else:
        x = -b / (2 * a)
        print(f'x = {x}')
