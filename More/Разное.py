# ----------------------------------------------------------------------------------------------------------------------
# Шифр Цезаря:
alphabet = "abcdefghijklmnopqrstuvwxyz"  # алфавит
word = "love"  # кодируемое слово
result = ""
step = 5  # шаг сдвига

for i in word:
    index = alphabet.find(i)  # метод .find возвращает индекс в строке
    index = (index + step) % len(alphabet)  # индекс + шаг сдвига с остатком от деления на длину строки(пример 36%26=10)
    result += alphabet[index]  # добавление в result значения по вычисленному индексу
print(result)

# ----------------------------------------------------------------------------------------------------------------------
# Шифр Цезаря: (вариант проще, без алфавита)
word = "love"  # кодируемое слово
result = ""
step = 5  # шаг сдвига

for i in word:
    index = ord(i) - ord('a')  # возвращает для каждого символа свой уникальный код
    index = (index + step) % 26  # индекс + шаг сдвига с остатком от деления на 26
    # (разница между первой и последней буквой алфавита)
    result += chr(ord('a') + index)  # возвращает символ по уникальному коду и выводит значение
print(result)
print(ord('a'))  # возвращает для каждого символа свой уникальный код
print(chr(97))  # возвращает символ по уникальному коду

# ----------------------------------------------------------------------------------------------------------------------
# Способы сложения введенных чисел:
numbers_1 = int(input("Введите число от 1 до 99: "))

if numbers_1 <= 9:
    print(numbers_1)
else:
    summ_1 = numbers_1 // 10 + numbers_1 % 10
    print(summ_1)

# ----------------------------------------------------------------------------------------------------------------------
numbers_2 = int(input("Введите любое число: "))

list_1 = list(str(numbers_2))
summ_2 = sum(map(int, list_1))
print(summ_2)

# ----------------------------------------------------------------------------------------------------------------------
numbers_3 = sum(list(map(int, input("Введите любое число: "))))  # сложение введенных чисел
print(numbers_3)

# ----------------------------------------------------------------------------------------------------------------------
numbers_4 = int(input("Введите любое число: "))

summ_3 = 0
while numbers_4 > 0:
    dell_1 = numbers_4 % 10
    summ_3 += dell_1
    numbers_4 = numbers_4 // 10
print(summ_3)

# ----------------------------------------------------------------------------------------------------------------------
# Найти длину гипотенузы треугольника:
import math  # импорт библиотеки

length, height = [int(input("Введите данные: ")) for _ in range(2)]

cathet = (length ** 2) + (height ** 2)
print(math.sqrt(cathet))  # math.sqrt - вычисляет корень из числа

# ----------------------------------------------------------------------------------------------------------------------
length, height = [int(input("Введите данные: ")) for _ in range(2)]
cathet = (length ** 2 + height ** 2) ** 0.5  # сумму степеней сторон возводим в степерь 0.5

print(cathet)

# ----------------------------------------------------------------------------------------------------------------------
import math  # импорт библиотеки

length, height = [int(input("Введите данные: ")) for _ in range(2)]

cathet = math.hypot(length, height)  # math.hypot(a,b) вычисляет гипотенузу сразу, из 2-х катетов
print(cathet)

# ----------------------------------------------------------------------------------------------------------------------
# Найти сумму всех значений с индексом кратным 3:
list_ = [5, 3, 9, 8, 4, 1, 22, 5, 6, 5, 7, 8, 9]
print(sum(list_[::3]))

# ----------------------------------------------------------------------------------------------------------------------
s = 0
for index, elem in enumerate(list_):
    if index % 3 == 0:
        s += elem
print(s)

# ----------------------------------------------------------------------------------------------------------------------
# Сместить список вправо с переносом последнего элемента в начало списка
list_a = [5, 3, 9, 8, 4, 1, 2, 5, 6, 5, 7, 8, 9]
del_all_index_0 = list_a.pop()  # Удаляем всё, кроме последнего элемента
list_a.insert(0, del_all_index_0)  # Добавляем через .insert(), на 0 элемент последний, со сдвигом вправо
print(list_a)

# ----------------------------------------------------------------------------------------------------------------------
list_b = [5, 3, 9, 8, 4, 1, 2, 5, 6, 5, 7, 8, 9]
new_list_b = list_b[-1:] + list_b[:-1]  # срезаем кроме -1 элемента + срезаем последний элемент
print(new_list_b)

# ----------------------------------------------------------------------------------------------------------------------
# Найти 2 минимальных значения:
list_a = [5, 3, 9, 8, 4, 1, 2, 5, 6, 5, 7, 8, 9]
list_a.sort()
print(list_a[1], list_a[2])
# ----------------------------------------------------------------------------------------------------------------------
list_a = [5, 3, 9, 8, 4, 1, 2, 5, 6, 5, 7, 8, 9]
list_b = list(set(list_a))
print(list_b[1], list_b[2])

# ----------------------------------------------------------------------------------------------------------------------
# Перевод в digit-ричную систему исчисления:
n = int(input())
s = input()

ans = int(s, n)
print(ans)

# ----------------------------------------------------------------------------------------------------------------------
# распаковать в один список, списки в списке:
list_1 = [[1, 2], [3, 4, 5], [6], [7, 8, 9, 10], [11], [12, 13, 14]]
list_glue = []
for i in list_1:
    list_glue.extend(i)  # добавление каждого итерируемого элемента списков, через функцию .extend()
print(list_glue)

# ----------------------------------------------------------------------------------------------------------------------
list_glue_2 = sum(list_1, [])  # конкатенация списков через метод sum()
print(list_glue_2)

# ----------------------------------------------------------------------------------------------------------------------
# Вывести значение и их кол-во в строке:
text = "sdfgldflgl" \
       "rgklmlie filmvsldr" \
       "vjyojhi5jliid temp_var;lg4jg"
dict_ = {}
for i in text:
    dict_[i] = text.count(i)  # в словарь добавляется ключ с элементом n_string,
    # и к нему присваивается кол-во повторений данного ключа
print(dict_)

# ----------------------------------------------------------------------------------------------------------------------
text = "sdfgldflgl" \
       "rgklmlie filmvsldr" \
       "vjyojhi5jliid temp_var;lg4jg"
dict_ = {}
for i in text:
    dict_[i] = text.count(i)  # в словарь добавляется ключ с элементом n_string,
    # и к нему присваивается кол-во повторений данного ключа
for i, j in dict_.items():
    print(f"Значение = {i} количество = {j}")

# ----------------------------------------------------------------------------------------------------------------------
un_symbols = set(text)  # перевод в тип set, нашли только уникальные символы
for i in un_symbols:
    s_count = text.count(i)  # метод count() вычисляет сколько раз конкретное значение появляется в строке или списке
    print(f"'{i}' - {s_count}")  # выводим уникальные символы и количество уникальных символов в тексте

# ----------------------------------------------------------------------------------------------------------------------
from collections import Counter  # из коллекции импортируем метод Counter

stat = Counter(text)  # создает словарь со значением и его количеством
for i, j in stat.items():  # перебираем словарь по ключам и значениям и получаем результат
    print(f"Символ '{i}' встретился {j} раз")

# ----------------------------------------------------------------------------------------------------------------------
# Проверка, является ли число простым:
while True:
    numbers = int(input())
    isprime = True
    for div in range(2, numbers):
        if numbers % div == 0:
            isprime = False

    if isprime:
        print(f"Число {numbers} является ПРОСТЫМ")
        break
    else:
        print(f"Число {numbers} НЕ является простым!")
# ----------------------------------------------------------------------------------------------------------------------
# Удалить каждое второе слово в строке:
text = input("Введите текст: ").split()
text = text[::2]
text = " ".join(text)
print(text)

# ----------------------------------------------------------------------------------------------------------------------
# Перевод числа в 2-ичную систему исчисления:
num = int(input("Введите число: "))
value = []  # список для значений
while num:
    if num % 2 == 1:  # если число нечетное, то добавляем 1
        value.append(1)
    else:
        value.append(0)  # иначе, добавляем нуль!
    num = num // 2  # уменьшаем число в 2 раза
revers_value = value[::-1]  # реверс списка
print(revers_value)  # результат

# ----------------------------------------------------------------------------------------------------------------------
num = int(input("Введите число: "))
value = bin(num)  # метод bin() - переводит число в 2-ичную систему исчисления
print(value[2:])

# ----------------------------------------------------------------------------------------------------------------------
# Из ФИО вывести фамилию и инициалы:
user = input("Введите ФИО: ").split()  # разбитие текста по пробелу
a_1, a_2 = user[1], user[2]  # 2 переменные принимают значения Имени и Отчества соответственно
print(f"{user[0]} {a_1[0]}. {a_2[0]}.")  # через _-строку добавляем первый индекс от user, a_1, a_2

# ----------------------------------------------------------------------------------------------------------------------
user = input("Введите имя: ")
f, i, o = user.split()  # разбитие текста по пробелу с сохранением в переменные
print(
    f"{f.capitalize()} {i[0].upper()}. {o[0].upper()}")  # Добавляем переменную _ с фамилией, первый индекс от n_string, o

# ----------------------------------------------------------------------------------------------------------------------
# Проверка формата даты:
year, month, day = input("Введите дату: ").split("-")


def times(year, month, day):
    if len(year) != 4 or len(month) != 2 or len(day) != 2:
        return False
    else:
        return True


print(times(year, month, day))


# ----------------------------------------------------------------------------------------------------------------------
def check_time(str_date):
    if len(str_date.split("-")) != 3:  # если длина строки разбитая по "-"
        return False
    year, month, day = str_date.split("-")  # разбиваем строку на 3 переменные
    if len(year) != 4 or len(month) != 2 or len(day) != 2:  # проверка длин строк
        return False
    if not (year.isdigit() and month.isdigit() and day.isdigit()):  # проверка на тип данных int
        return False
    year, month, day = int(year), int(month), int(day)  # смена типа данных на int
    if 2000 <= year <= 3000 and 1 <= month <= 12 and 1 <= day <= 31:  # проверка диапазона дат
        return True
    else:
        return False


print(check_time("2022-05-09"))


# ----------------------------------------------------------------------------------------------------------------------
# Повторяющийся запрос на формат даты:
def check_time():
    while True:
        str_date = input("Введите дату: ")
        if len(str_date.split("-")) != 3:  # если длина строки разбитая по "-"
            continue
        year, month, day = str_date.split("-")  # разбиваем строку на 3 переменные
        if len(year) != 4 or len(month) != 2 or len(day) != 2:  # проверка длин строк
            continue
        if not (year.isdigit() and month.isdigit() and day.isdigit()):  # проверка на тип данных int
            continue
        year, month, day = int(year), int(month), int(day)  # смена типа данных на int
        if 2000 <= year <= 3000 and 1 <= month <= 12 and 1 <= day <= 31:  # проверка диапазона дат
            return True
        else:
            continue


print(check_time())


# ----------------------------------------------------------------------------------------------------------------------
# Сортировка словаря по значению:
def check_numbers(list_):
    dict_ = {}
    for i in list_:
        dict_[i] = list_.count(i)
    return dict_


result = check_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 7, 10, 1, 3, 7])
print(f'"Число" | "кол-во вхождений" {sorted(result.items(), key=lambda x: x[1])}')

# ----------------------------------------------------------------------------------------------------------------------
# Проверить введены ли даты в порядке возрастания:

import datetime  # библиотека


def date_rev(a, b, c):
    datetime.date.fromisoformat(a)  # перевод строки "2023-07-21" в формат сравнивания и не только
    datetime.date.fromisoformat(b)
    datetime.date.fromisoformat(c)
    if a < b < c:
        return True
    else:
        return False


print(date_rev("2023-07-21", "2023-07-22", "2023-07-23"))

# ----------------------------------------------------------------------------------------------------------------------

# Кол-во дней в месяце:

month_day = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
name_month = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август",
              "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"]
while True:
    try:
        month_number = int(input("Введите номер месяца: "))

    except ValueError as e:
        print("Введено не число!\nПопробуйте еще раз.\n")

    else:
        if month_day.get(month_number) is None:
            print("Вы ввели неверный номер месяца!\nПопробуйте еще раз.\n")
        else:
            print(f"Кол-во дней в месяце <{name_month[month_number - 1]}> равняется {month_day.get(month_number)}")
            break

# ----------------------------------------------------------------------------------------------------------------------

# Односложный калькулятор: (с отловом ошибок)

import operator

while True:

    try:
        num, num_2 = [int(input("Введите число: ")) for _ in range(2)]
        sign = input("Введите математический оператор: ")
        if sign not in ["+", "-", "*", "/"]:
            print("\nОшибка: <Неверная операция!>.\n"
                  "Выберете один из разрешенных операторов (+, -, *, /)\n"
                  "Попробуйте еще раз.\n")
            continue


        def mathematical_function():
            if sign == "+":
                return operator.add(num, num_2)
            if sign == "-":
                return operator.sub(num, num_2)
            if sign == "*":
                return operator.mul(num, num_2)
            if sign == "/":
                return operator.truediv(num, num_2)


        print(f"\nВаш результат: {mathematical_function()}")
        break
    except ZeroDivisionError as e:
        print("\nОшибка: <На ноль делить нельзя!>\nПопробуйте еще раз.\n")
    except ValueError as e:
        print("\nОшибка: <Вы ввели не число!>\nПопробуйте еще раз.\n")
    continue

# ----------------------------------------------------------------------------------------------------------------------

# Найти границы пересечения отрезков:


a1, b1, a2, b2 = [int(input()) for _ in range(4)]

list_range = [_ for _ in range(a1, b1 + 1)]
list_range_2 = [_ for _ in range(a2, b2 + 1)]

border_crossings = list(set(list_range).intersection(list_range_2))
border_crossings.sort()
if not border_crossings:
    print("пустое множество")
elif border_crossings[0] == border_crossings[-1]:
    print(border_crossings[0])
else:
    print(border_crossings[0], border_crossings[-1])
