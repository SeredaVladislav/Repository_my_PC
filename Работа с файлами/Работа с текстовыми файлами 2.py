# ------------------------------------------------ Позиция в файле -----------------------------------------------------
# -------------------------------
# ------------

# При чтении файла с методами:
# read() - считывание всего файла, readlines() - считывание всего файла, с возвратом в виде массива строк, происходит
# перемещение текущей позиции курсора в конец файла, а при использовании метода readline() - считывание первой строки
# файла, происходит перевод курсора на новую строку.

# При открытии файла, позиция курсора указывает на первый символ.

file = open('languages.txt', 'r', encoding='utf-8')
line1 = file.readline()
line2 = file.readline()

file.close()

# Если после двух вызовов метода readline() вызвать метод read(), он считает не весь файл, а только оставшиеся строки:
file = open('languages.txt', 'r', encoding='utf-8')
line1 = file.readline()
line2 = file.readline()
remaining_lines = file.read()  # считывание начинается с 3 строки до конца файла

file.close()

# После завершения чтения мы больше не можем считать ни одного символа из файла. Все последующие вызовы методов read()
# или readline() будут приводить к считыванию пустой строки.

# Для повторного чтения данных из файла, можно:
# 1. Переоткрыть файл, тогда курсор снова попадёт в начало;
# 2. Переместить курсор с помощью файлового метода seek().

# -------------------------------
# Файловый метод seek():

# Файловый метод задаёт позицию курсора в байтах от начала файла. Чтобы перевести курсор в самое начало файла
# необходимо вызвать метод seek(), передав ему в качестве аргумента значение 0.

file = open('languages.txt', 'r', encoding='utf-8')
line1 = file.readline()
file.seek(0)  # переводим курсор в самое начало
line2 = file.readline()

print(line1, line2)
# Python
# Python

file.close()

# !!! Метод seek() не очень полезен при работе с текстовыми файлами, так как не учитывает разделение текста на строки.
# А вот при работе с файлами в двоичном режиме умение работать с позицией и смещениями очень важно!

# -------------------------------
# Файловый метод tell():
# Файловый метод получает текущую позицию курсора.

file = open('languages.txt', 'r', encoding='utf-8')
print(file.tell())
line1 = file.readline()
print(file.tell())
# 0
# 8

file.close()

# ------------------------------------------------ Менеджер контекста --------------------------------------------------

# Менеджер контекста — объект, реализующий одноименный протокол. Объекты, реализующие этот протокол, позволяют
# использовать следующий специальный синтаксис:

# with object as name:
#     Здесь нам доступен ресурс name.
#     Это тело with-блока.
# А здесь ресурс name уже освобождён, даже если в теле with-блока произошла ошибка.

# Обычное решение:
file = open('languages.txt', 'r', encoding='utf-8')
for line in file:
    print(line)

file.close()  # ручное закрытие файла
print('Файл закрыт')

# Через менеджер контекста:
with open('languages.txt', 'r', encoding='utf-8') as file:
    for line in file:
        print(line)
# автоматическое закрытие файла
print('Файл закрыт')
# ------------

# С помощью менеджера контекста можно работать с несколькими файлами:
# with open('input.txt', 'r') as input_file, open('output_conc.txt', 'w') as output_file:
#     обработка файлов
# ------------
# -------------------------------------------------- Задачи ------------------------------------------------------------
with open('population.txt') as file:
    """Вам доступен текстовый файл population.txt, в котором записаны строки текста. Напишите программу, которая выводит
    все строки наибольшей длины из файла, не меняя их порядок."""

    max_length = len(max(file.readlines(), key=len))
    file.seek(0)
    total_result = filter(lambda x: len(x) == max_length, file)

    for i in total_result:
        print(i.strip())
# ------------
with open('data.txt', 'r', encoding='utf-8') as file:
    """Вам доступен текстовый файл w.txt, в котором записаны строки текста. Напишите программу, выводящую все 
    строки данного файла в обратном порядке: сначала последнюю, затем предпоследнюю и т.д."""
    result = file.readlines()
    for i in result[::-1]:
        print(*i.split())
# ------------
with open('text.txt', 'r', encoding='utf-8') as file:
    """Вам доступен текстовый файл text.txt с одной строкой текста. Напишите программу, которая выводит на экран эту 
    строку в обратном порядке."""
    f = file.read()[::-1]
    print(f)
# ------------

from functools import reduce

with open('population.txt', 'r', encoding='utf-8') as file:
    """Вам доступен текстовый файл population.txt, каждая строка которого может содержать одно или несколько целых чисел,
     разделенных одним или несколькими пробелами. Напишите программу, которая вычисляет сумму чисел в каждой строке и 
     выводит эту сумму на экран (для каждой строки выводится сумма чисел в этой строке)."""

    array_numbers = file.readlines()
    for i in array_numbers:
        print(reduce(lambda x, y: int(x) + int(y), i.split()))
# ------------

with open('population.txt') as f:
    """Вам доступен текстовый файл population.txt, набранный латиницей. Напишите программу, которая выводит количество букв
     латинского алфавита, слов и строк. Выведите три найденных числа в формате, приведенном в примере."""

    words = f.read()
    letter = len([i for i in words if i.isalpha()])
    f.seek(0)

    print(f"Input file contains:\n{letter} letters\n{len(words.split())} words\n{len(f.readlines())} lines ")
# ------------

from random import choice

with open('population.txt') as first_name, open('last_names.txt') as last_name:
    """Вам доступны два текстовых файла population.txt и last_names.txt, один с именами, другой с фамилиями.
    Напишите программу, которая c помощью модуля random создает 3 случайные пары имя + фамилия, а затем выводит их, 
    каждую на отдельной строке."""
    for _ in range(3):
        print(f'{"".join(choice(first_name.readlines()).split())} '
              f'{"".join(choice(last_name.readlines()).split())}')

        first_name.seek(0)
        last_name.seek(0)
# ------------

with open('population.txt') as f:
    """
    Вам доступен текстовый файл population.txt с названиями стран и численностью их населения, разделенными 
    символом табуляции '\t'. Напишите программу выводящую все страны, название которых начинается с буквы 'G', 
    численность населения которых больше чем 500000 человек, не меняя их порядок.
    """
    for i in f.readlines():
        i = i.split("\t")
        if i[0][0] == 'G' and int(i[1]) > 500_000:
            print(i[0])


# ------------

def read_csv():
    """
    Вам доступен CSV-файл data.csv, содержащий информацию в csv формате. Напишите функцию read_csv для чтения
    данных из этого файла. Она должна возвращать список словарей, интерпретируя первую строку как имена ключей,
    а каждую последующую строку как значения этих ключей.
    """
    with open('data.csv') as f:
        res = list(map(lambda x: x.split(','), map(str.strip, f.readlines())))
        return [dict(zip(res[0], i)) for i in res[1::]]
# ------------
