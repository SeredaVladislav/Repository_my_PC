# ---------------------------------------------- Файловый ввод и вывод -------------------------------------------------
# -------------------------------
# ------------

# Файл (англ. file) — именованная область данных на носителе информации.

# ------------
# Когда программе нужно сохранить данные для дальнейшего использования, она пишет их в файл. Из файла записанные
# данные можно считать.

# Программисты называют такой процесс сохранения данных — ЗАПИСЬ ДАННЫХ В ФАЙЛ. Когда часть данных пишется в файл,
# она копируется из переменной, находящейся в оперативной памяти. Файл, куда сохраняются данные, называется ФАЙЛ ВЫВОДА,
# потому что программа помещает в него выходные данные.
# ------------
# Процесс извлечения данных из файла называется ЧТЕНИЕ ДАННЫХ ИЗ ФАЙЛА. Данные считываются из файла ввода. Программа
# извлекает входные данные из этого файла. Когда порция данных считывается из файла, она копируется в оперативную
# память, где на нее ссылается переменная.
# ---------------------------------------------- Работа с файлами ------------------------------------------------------

# Когда в программе используется файл, как правило, требуется выполнить три шага:

# 1. Открыть файл. В процессе открытия файла создается связь между файлом и программой. Открытие файла вывода обычно
# создает файл на диске и позволяет программе записать в него данные. Открытие файла ввода позволяет программе
# прочитать данные из файла.

# 2. Обработать файл. На этом шаге данные либо записываются в файл (если это файл вывода), либо считываются из файла
# (если это файл ввода).

# 3. Закрыть файл. После использования файла программой его нужно закрыть, тем самым освободить ресурс и разорвать
# связь файла с программой.
# ------------------------------------------------ Типы файлов ---------------------------------------------------------

# Существует два типа файлов: текстовые и двоичные (бинарные):
# 1. Текстовый файл содержит данные, которые были закодированы в виде текста при помощи такой схемы кодирования,
# как ASCII или Юникод. Даже если файл содержит числа, эти числа в файле хранятся как набор символов.
# В результате файл можно открыть и просмотреть в текстовом редакторе, таком как Блокнот.

# 2. Двоичный файл содержит данные, которые не были преобразованы в текст. Данные, которые помещены в двоичный файл,
# предназначены только для чтения программой, и такой файл невозможно просмотреть в текстовом редакторе.

# P.S. Разделение файлов на текстовые и бинарные искусственное, так как любой текстовый файл бинарен.
# --------------------------------------------- Методы доступа к файлам ------------------------------------------------

# Большинство языков программирования обеспечивает два способа получения доступа к данным в файле:
# 1. последовательный,
# 2. прямой или произвольный.

# Последовательный, как при проигрывании кассет с записью на пленке, выдает порции информации одну за другой.
# При работе с таким файлом не получится перескочить сразу к нужной части данных, сначала придется прочитать
# все предыдущие.

# При работе с файлом с прямым или произвольным доступом можно перескочить непосредственно к любой порции данных,
# не читая предыдущие. Как проигрыватель компакт-дисков или МР3-плеер перескакивает сразу к любой песне.
# ------------------------------------------------- Кодировка файлов ---------------------------------------------------

# Кодировка UTF-8 самая распространенная.
# UTF-8 — сложная кодировка, на обозначение одного символа в ней может использоваться от одного до шести байт.
# В операционной системе Windows до сих пор используется однобайтовая кодировка Windows-1251. Чтобы избежать проблем
# при работе с текстовыми файлами в Windows нужно явно указывать кодировку.

# При работе с ОС Linux и MacOS таких проблем не возникает вовсе, поскольку в них кодировка UTF-8 применяется по
# умолчанию.
# ----------------------------------------------- Относительные и абсолютные пути --------------------------------------

# Путь файла (или путь к файлу) — последовательное указание имен папок, через которые надо пройти, чтобы добраться
# до объекта.

# Пути к файлу бывают двух типов:
# 1. абсолютные;
# 2. относительные.

# Абсолютный путь – полный путь к файлу, показывающий точное место его расположения. Он всегда один и тот же, пока
# файл не перемещен.

# Примеры абсолютного пути:
# D:\Data\MyFiles\picture.png;
# С:\MyPrograms\Python\script.py;
# C:\Users\timur\YandexDisk\BeeGeek\Python\book.pdf.
# ------------
# Указывая абсолютный путь на компьютере, обязательно нужно указывать диск, а также использовать \ (для Windows) в
# качестве разделителя имен папок.

# В unix-подобных ОС, например, в Linux и Mac OS для отделения имен папок используется прямой слеш /, а не обратный,
# как в Windows.
# ------------
# Относительный путь – привязан к какой-либо "отправной точке" и указан по отношению к ней.

# Например, у нас есть картинка picture.png, которая хранится на диске D.
# Абсолютный путь к ней будет D:\Data\MyFiles\picture.png, а относительно папки Data можно
# указывать MyFiles\picture.png.

# Абсолютный путь показывает точное местонахождение файла, а относительный показывает путь к файлу от какой-либо
# "отправной точки".
