# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Тип данных complex ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Вещественные числа ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Объединение рациональных и иррациональных чисел образует множество вещественных чисел. Геометрическая интерпретация
# множества вещественных чисел – это числовая прямая.

# Каждому вещественному числу соответствует определённая точка числовой прямой, и наоборот – каждой точке числовой
# прямой обязательно соответствует некоторое вещественное число. Другими словами, числовая прямая полностью покрыта
# вещественными числами.
# (a * a) == (a ** 2) >= 0

# Пример квадратов вещественного числа:
# 2 * 2 == 4
# (-2) * (-2) == 4
# 0 * 0 == 0
# 0.1 * 0.1 == 0.01

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Мнимые числа ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Мнимое число, это когда 2 одинаковых числа при перемножении (квадрат числа) дает отрицательное число!
# i * i = pow(i, 2) = -1
# Такие числа в математике называются мнимыми и обозначают их буквой i, от слова imaginary (мнимый, воображаемый).

# pow(i, 2) = -1 --> i = sqrt(-1)
# С таким числом (обозначением), можно решать задачи, где требуется извлечь квадратный корень из отрицательного числа.
# ---------------------

# Пример 1.
# Выразить sqrt(-9):
# sqrt(-9) = sqrt(9) * sqrt(-1) = 3 * i

# Или в общем виде для любого положительного числа x существует равенство:
# sqrt(-x) = sqrt(x * i)
# ---------------------

# Пример 2.
# Посчитать значение выражения pow((5 * i), 2):
# Согласно определению мнимой единицы pow(i, 2) = -1, получаем:
# pow((5 * i), 2) = pow((25 * i), 2) = 25 * (-1) = -25
# ---------------------

# Пример 3.
# Решить уравнение pow(x, 2) + 1 = 0:
# pow(x, 2) = -1. Данное уравнение имеет решение через мнимые числа.
# pow(x, 2) = -1 --> x = +-sqrt(-1) = +-i

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Мнимая единица ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# i = sqrt(-1) - мнимая единица.
# Введение мнимой единицы позволяет расширить множество вещественных чисел до множества комплексных чисел.

# Мнимая единица i обладает интересным свойством: каждый раз при умножении на i она "циклически" проходит через 4
# различных значения:
# 1) 1 * i = i
# 2) i * i = -1
# 3) -1 * i = -i
# 4) -i * i = 1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Комплексные числа в математике ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Комплексное число – комбинация вещественного и мнимого числа. Таким образом, число вида a + b*i, где
# a, b – вещественные числа, называется комплексным числом.

# Число a – называется вещественной (действительной) частью комплексного числа, а число b – мнимой частью числа.

# Примеры комплексных чисел:
# 1 + i,
# 39 + 4 * i,
# 0.5 - 6.7 * i,
# -2 + PI * i,
# sqrt(2) + sqrt(3) * i

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Комплексные числа в Python ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# В языке Python есть возможность работать с комплексными числами. Общая форма представления комплексного числа
# следующая: real + imag j, где:
# real - вещественная часть комплексного числа;
# imag - мнимая часть комплексного числа, которая завершается символом j или J.

# В Python используется буква j, а не i.

z1 = 5 + 7j
z2 = 1j
z3 = -3 + 5J
z4 = 1.5 + 3.2j

print(z1, z2, z3, z4, sep='\n')
print(type(z1))
# (5+7j)
# 1j
# (-3+5j)
# (1.5+3.2j)
# <class 'complex'>

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Создание комплексных чисел ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

z1 = -3 + 2j  # создание на основе литерала
z2 = complex(6, -8)  # z2 = 6 - 8j
z3 = complex(0, 2.5)  # z3 = 2.5j
z4 = complex(5, 0)  # z4 = 5 + 0j
z5 = complex('3+4j')  # создание на основе строки

print(z1, z2, z3, z4, z5, sep='\n')
# (-3+2j)
# (6-8j)
# 2.5j
# (5+0j)
# (3+4j)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Арифметические операции над комплексными числами ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Тип данных complex отлично интегрирован в язык Python. С complex числами работают все привычные операции: сложение,
# вычитание, умножение, деление, возведение в степень.

z1 = 1 + 3j
z2 = -3 + 2j

print('z1 + z2 =', z1 + z2)
print('z1 - z2 =', z1 - z2)
print('z1 * z2 =', z1 * z2)
print('z1 / z2 =', z1 / z2)
print('z1^20 =', z1 ** 20)
# z1 + z2 = (-2+5j)
# z1 - z2 = (4+1j)
# z1 * z2 = (-9-7j)
# z1 / z2 = (0.23076923076923078-0.8461538461538461j)
# z1^20 = (9884965888-1512431616j)

# Мы также можем совершать арифметические операции над complex и целыми числами (миксовать complex, int, float).

z = 1 + 3j

print(z + 5)
print(z - 2)
print(3 * z)
print(z / 2)
# (6+3j)
# (-1+3j)
# (3+9j)
# (0.5+1.5j)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Методы и свойства комплексных чисел ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Для получения действительной и мнимой частей комплексного числа используются свойства real и imag.
z = 3 + 4j

print('Действительная часть =', z.real)
print('Мнимая часть =', z.imag)
# Действительная часть = 3.0
# Мнимая часть = 4.0

# ---------------------
# Для нахождения сопряженного комплексного числа, можно использовать метод conjugate().
z = 3 + 4j

print('Сопряженное число =', z.conjugate())
# Сопряженное число = (3-4j)

# ---------------------
# Для нахождения модуля комплексного числа, используется встроенная функция abs().
z = 3 + 4j

print('Модуль числа =', abs(z))
# Модуль числа = 5.0

# ---------------------
# Встроенный модуль math работает с вещественными числами.

# Для работы с комплексными числами есть модуль cmath. # Модуль cmath включает дополнительные функции для использования
# комплексных чисел.
import cmath

z = 2 + 3j
print(cmath.phase(z))  # полярный угол
print(cmath.polar(z))  # полярные координаты
# 0.982793723247329
# (3.605551275463989, 0.982793723247329)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Задачи:
# ---------------------
# "Дано натуральное число n и два комплексных числа z1, z2."
# "Напишите программу, которая вычисляет и выводит значение выражения:
# z1 ** n + z2 ** n + (сопряж.z1) ** n + (сопряж.z2) ** (n+1)"
n = int(input())
z1, z2 = complex(input()), complex(input())
print((z1 ** n) + (z2 ** n) + (z1.conjugate() ** n) + (z2.conjugate() ** (n + 1)))

# ---------------------
numbers = [3 + 4j, 3 + 1j, -7 + 3j, 4 + 8j, -8 + 10j, -3 + 2j, 3 - 2j, -9 + 9j, -1 - 1j, -1 - 10j, -20 + 15j, -21 + 1j,
           1j, -3 + 8j, 4 - 6j, 8 + 2j, 2 + 3j]

# Комплексные числа хранятся в списке numbers. Дополните приведенный код так, чтобы он вывел комплексное число с
# наибольшим модулем и сам модуль числа на отдельных строках.

res = -1
ind = 0

for index, value in enumerate(numbers):
    if abs(value) > res:
        res = abs(value)
        ind = index

print(numbers[ind], res, sep="\n")
# ---------------------

# Даны два комплексных числа. Напишите программу, которая вычисляет и выводит их сумму, разность и произведение.

a, b = complex(input()), complex(input())

for i in "+-*":
    print(a, i, b, '=', eval(f"a {i} b"))
# ---------------------




