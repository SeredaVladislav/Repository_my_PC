# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Модуль decimal ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# В Python есть три дополнительных числовых типа данных:

# Decimal – десятичное число, для выполнения точных расчетов;
# Fraction – число, представляющее собой обыкновенную дробь, с заданным числителем и знаменателем;
# Complex – комплексное число.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Тип данных float: (Immutable, Реализовано аппаратно)

if 0.3 == 0.3:
    print('YES')
else:
    print('NO')
# YES
# ---------------------
num = 0.1 + 0.1 + 0.1  # 0.30000000000000004
if num == 0.3:
    print('YES')
else:
    print('NO')
# NO
# т.к. num > 0.3 на миллионную долей, результат будет NO (Всё из-за невозможности сохранения точного значения)
# --------------------
num = 0.1 + 0.1 + 0.1
eps = 0.00000001  # точность сравнения
if abs(num - 0.3) < eps:  # число num отличается от числа 0.3 менее чем 0.000000001
    print('YES')
else:
    print('NO')
# YES
# --------------------

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Тип данных Decimal: (Immutable, Реализовано программно, содержит контекст для настройки выполнения операций)

# Тип данных Decimal – это класс из стандартного модуля decimal. Он представляет собой число с плавающей точкой, как
# и float. Однако, Decimal имеет ряд существенных отличий от float.

# Тип данных Decimal оперирует числами с произвольной – задаваемой программистом, но конечной точностью.
# По умолчанию точность составляет 28 десятичных знаков.

# Для типа данных Decimal можно настроить:
# 1. точность выполнения операций в кол-ве десятичных знаков
# 2. режимы округления
# 3. режимы обработки исключительных ситуаций (деления на ноль, переполнение)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Создание Decimal чисел ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Создание число Decimal можно из int, float, str.
from decimal import *

d1 = Decimal(1)
d2 = Decimal(567)
d3 = Decimal(-93)
d4 = Decimal('12345')
d5 = Decimal('52.198')

print(type(d1))  # <class 'decimal.Decimal'>
print(d1, d2, d3, d4, d5, sep='\n')
# 1
# 567
# -93
# 12345
# 52.198


# При создании Decimal чисел из чисел с плавающей точкой (float) возникают проблемы, так как float числа округляются
# внутри до ближайшего возможного, а Decimal об этом ничего не знает и копирует содержимое float.
num = Decimal(0.1)
print(num == 0.1)  # True
print(num)  # 0.1000000000000000055511151231257827021181583404541015625

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Арифметические операции над Decimal числами ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

num1 = Decimal('5.2')
num2 = Decimal('2.3')
print(num1 + num2)  # 7.5
print(num1 - num2)  # 2.9
print(num1 * num2)  # 11.96
print(num1 / num2)  # 2.260869565217391304347826087
print(num1 // num2)  # 2
print(num1 ** num2)  # 44.34122533787992500412791298

num = Decimal('5.2')
print(num + 1)  # 6.2
print(num - 10)  # -4.8
print(num * 2)  # 10.4
print(num ** 4)  # 731.1616

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Математические функции ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Decimal числа можно передавать как аргументы функциям, ожидающим float. Они будут преобразованы во float. К примеру,
# модуль math, оперирующий float числами, может работать и с Decimal числами.

from decimal import *
from math import *

num1 = Decimal('1.44')
num2 = Decimal('0.523')
print(sqrt(num1))  # 1.2
print(sin(num2))  # 0.4994813555186418
print(type(log(num1 + num2)))  # 0.6744739152943241  (<class 'float'>)

# Результатом работы функции модуля math являются float числа, а не Decimal!

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Тип данных Decimal имеет встроенные математические методы:

# sqrt() вычисляет квадратный корень из Decimal числа;
# exp() возвращает e(x) для Decimal числа;
# ln() вычисляет натуральный логарифм (по основанию e) Decimal числа;
# log10() вычисляет десятичный логарифм (по основанию 10) Decimal числа. (сколько нужно умножить раз число 10, для
# получения заданного числа)

num = Decimal('25.0')
print(num.sqrt())  # 3.162277660168379331998893544
print(num.exp())  # 22026.46579480671651695790065
print(num.ln())  # 2.302585092994045684017991455
print(num.log10())  # 1

# Метод as_tuple():
# Метод возвращает кортеж из 3 элементов:
# 1. sign – знак числа (0 для положительного числа и 1 для отрицательного числа);
# 2. digits – цифры числа;
# 3. exponent – значение экспоненты (количество цифр после точки, умноженное на −1).

num1 = Decimal('-1.4568769017')
num2 = Decimal('0.523')
print(num1.as_tuple())  # DecimalTuple(sign=1, digits=(1, 4, 5, 6, 8, 7, 6, 9, 0, 1, 7), exponent=-10)
print(num2.as_tuple())  # DecimalTuple(sign=0, digits=(5, 2, 3), exponent=-3)

# Обращение по отдельности к элементам метода:
num = Decimal('-1.4568769017')
num_tuple = num.as_tuple()
print(num_tuple.sign)  # 1
print(num_tuple.digits)  # (1, 4, 5, 6, 8, 7, 6, 9, 0, 1, 7)
print(num_tuple.exponent)  # -10

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Работа с контекстом Decimal чисел ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Базовые параметры Decimal можно посмотреть в его контексте, выполнив функцию getcontext().

print(getcontext())
# Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0,
# flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])

# prec - точно знаков;
# rounding - округление к ближайшему четному;
# Emin, Emax - пределы по экспоненте;
# capitals - заглавная E при печати;
# traps - включенные ловушки (неправильная операция, деление на ноль, переполнение.)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Точность чисел ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

getcontext().prec = 3  # устанавливаем точность в 3 знака

num = Decimal('3.1415')
print(num)  # 3.1415
print(num * 1)  # 3.14
print(num * 2)  # 6.28
print(num / 2)  # 1.57

# Точность вступает в силу только во время арифметических операций, а не при создании самих чисел.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Округление чисел ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Округляют числа Decimal с помощью метода quantize().

getcontext().prec = 4  # устанавливаем точность числа

num = Decimal('3.1415926535')
print(num.quantize(Decimal('1.000')))  # округление до 3 цифр в дробной части
print(num.quantize(Decimal('1.00')))  # округление до 2 цифр в дробной части
print(num.quantize(Decimal('1.0')))  # округление до 1 цифр в дробной части
# 3.142
# 3.14
# 3.1


getcontext().prec = 2  # устанавливаем точность округления

num = Decimal('3.1415926535')
print(num.quantize(Decimal('1.00')))  # округление до 2 цифр в дробной части
# decimal.InvalidOperation: [<class 'decimal.InvalidOperation'>]

# Чтобы избежать ошибки, необходимо поменять точность округления на 3 и больше!

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Помимо первого параметра, метод quantize() принимает в качестве второго параметра стратегию округления:
# ROUND_CEILING – округление в направлении бесконечности (Infinity);
# ROUND_FLOOR – округляет в направлении минус бесконечности (- Infinity);
# ROUND_DOWN – округление в направлении нуля;
# ROUND_HALF_EVEN – округление до ближайшего четного числа, число 6.5 округлится не до 7, а до 6;
# ROUND_HALF_DOWN – округление до ближайшего нуля;
# ROUND_UP – округление от нуля;
# ROUND_05UP – округление от нуля (если последняя цифра после округления до нуля была бы 0 или 5,
# в противном случае к нулю).

num = Decimal('3.456')

print(num.quantize(Decimal('1.00'), ROUND_CEILING))  # 3.46
print(num.quantize(Decimal('1.00'), ROUND_FLOOR))  # 3.45

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Сравнение float и Decimal чисел ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Выбор между типами данных Decimal и float – поиск компромисса в условиях конкретной задачи.

# Если нужно считать очень много (симуляции, физика, графика, игры), имеет смысл отказаться от точности Decimal в
# пользу скорости и компактности хранения данных float. В бизнесе и финансах считать приходится не так много, но
# делать это нужно предельно точно, тут имеет смысл посмотреть в сторону Decimal.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Сравнение между собой чисел Decimal:
num = Decimal('0.1')
if num * 3 == Decimal('0.3'):
    print('YES')
else:
    print('NO')
# YES

# Минимумы и максимумы, сортировка:
s = '1.34 3.45 1.00 0.03 9.25'

numbers = [Decimal(i) for i in s.split()]
maximum = max(numbers)
minimum = min(numbers)
numbers.sort()

print(maximum)  # 9.25
print(minimum)  # 0.03
print(numbers)  # [Decimal('0.03'), Decimal('1.00'), Decimal('1.34'), Decimal('3.45'), Decimal('9.25')]

# Сокращение в записи:
from decimal import Decimal as D

num1 = D('1.5') + D('3.2')
num2 = D('1.4') * D('2.58')
print(num1)
print(num2)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Задачи:

# Decimal числа, разделенные символом пробела, хранятся в строковой переменной s. Дополните приведенный код, чтобы он
# вывел сумму наибольшего и наименьшего Decimal числа.

from decimal import Decimal as D

s = ('0.77 4.03 9.06 3.80 7.08 5.88 0.23 4.65 2.79 0.90 4.23 2.15 3.24 8.57 0.10 8.57 1.49 5.64 3.63 8.36 1.56 6.67'
     ' 1.46 5.26 4.83 7.23 1.22 1.02 7.82 9.97 5.40 9.79 9.82 2.78 2.96 0.07 1.72 7.24 7.84 9.23 1.71 6.24 5.78 5.37'
     ' 0.03 9.60 8.86 2.73 5.83 6.50')

array_decimal_num = [D(num) for num in s.split()]
print(max(array_decimal_num) + min(array_decimal_num))
# --------------------

# Decimal числа, разделенные символом пробела, хранятся в строковой переменной s. Дополните приведенный код, чтобы он
# вывел на первой строке сумму всех чисел, а на второй строке 5 самых больших чисел в порядке убывания, разделенных
# символом пробела.

from decimal import Decimal as D

s = ('9.73 8.84 8.92 9.60 9.32 8.97 8.53 1.26 6.62 9.85 1.85 1.80 0.83 6.75 9.74 9.11 9.14 5.03 5.03 1.34 3.52'
     ' 8.09 7.89 8.24 8.23 5.22 0.30 2.59 1.25 6.24 2.14 7.54 5.72 2.75 2.32 2.69 9.32 8.11 4.53 0.80 0.08 9.36'
     ' 5.22 4.08 3.86 5.56 1.43 8.36 6.29 5.13')

array_decimal_num = [D(num) for num in s.split()]
array_decimal_num.sort(reverse=True)
array_decimal_s = [str(i) for i in array_decimal_num[:5]]

print(sum(array_decimal_num))
print(*array_decimal_s[:5])
# --------------------

# Дополните приведенный код, чтобы он вывел сумму наибольшей и наименьшей цифры Decimal числа.

from decimal import Decimal as D

num = D(input())
num_D = num.as_tuple().digits

print(max(num_D) + min(num_D) * (abs(num) >= 1))
# --------------------

# На вход программе подается Decimal число d. Напишите программу, которая вычисляет значение выражения:
# e(d)+ln(d)+lg10(d)+sqrt(d)

from decimal import Decimal

d = Decimal(input())

res = d.exp() + d.ln() + d.log10() + d.sqrt()
print(res)
