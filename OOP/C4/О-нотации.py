# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ О-нотация ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


# Временная сложность алгоритма - какое количество времени может потребоваться для выполнения алгоритма.
# Она зависит от размера входных данных.

# Пространственная сложность алгоритма - связана с количеством памяти, которое он использует в ходе своей работы.


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Алгоритмы различной сложности ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Константный алгоритм O(1). (алгоритм, который выполняет необходимое действие всегда за одинаковое количество времени).

# К таким «алгоритмам» относят очень простые операции:
# присваивание;
# арифметические операции;
# логические операции;
# сравнение объектов;

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Линейный алгоритм O(index_del). (чем больше элементов, тем больше времени нужно, и, более того, количество времени возрастает
# в то же самое количество раз, как и размер списка).

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Логарифмические алгоритмы O(log(index_del)). (как возрастает временная сложность алгоритма с ростом размера входных данных).

# Пример:
# Например, вам нужно разрезать лист А4 на 16 частей. Можно сделать разметку и отрезать кусочек за кусочком — такой
# алгоритм будет линейным, но можно разрезать пополам, потом сложить их и разрезать сразу оба. Получившиеся четверти
# снова сложить и снова разрезать, но уже сразу 4 штуки и т. д. — это и есть логарифмический алгоритм.


# Таблица логарифмов:
#   2**1	        2**2	    2**3	    2**4	    2**5	        2**6
#     2 	          4   	      8	          16	     32	             64
# log2 2 = 1	log2 4 = 2	log2 8 = 3	log2 16 = 4	 log2 32 = 5	log2 64 = 6


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Алгоритмическая троица: «О» большая, омега, тета ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Для оценки сложности алгоритмов вводятся 3 математические величины:

# «О» большая — верхняя оценка сложности алгоритма;
# «Ω» (омега) — нижняя оценка сложности;
# «Θ» (тета) — точная оценка сложности.


# Сложность алгоритма:
# Константная O(1): Сложение, присваивание

# Логарифмическая O(log(index_del)): Разрезание бумаги на части

# Линейная O(index_del): Поиск максимального элемента из списка

# Квадратичная O(index_del^2): Расстановка книг в алфавитном порядке

# Полиномиальная O(index_del^k): Про такие алгоритмы лучше забыть

# Факториальная O(index_del!): А такие наводят ужас на всех программистов

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
