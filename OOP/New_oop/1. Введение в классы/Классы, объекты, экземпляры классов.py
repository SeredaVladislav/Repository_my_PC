# ------------------------------------------------- Объект -------------------------------------------------------------
# -------------------------------
# ------------

# С точки зрения ООП объект — это контейнер, состоящий из:
# 1. Данных, обозначающих текущее состояния объекта;
# 2. Поведения.

my_list = [1, 2, 3]  # Создание объекта
print(my_list)

my_list.append(5)  # Поведение объекта
my_list.reverse()  # Поведение объекта

# -------------------------------
# Класс:

# Класс объекта — это коллекция характеристик, объединяющая атрибуты, имеющиеся у всех экземпляров (объектов) подобного
# класса.

# Для каждого типа данных свойственно своё поведение, например, для типа данных «строка» имеются методы, определяющие
# поведение строчного типа данных.

# -------------------------------
# Связь объекта с классом:

# Каждый объект принадлежит к определенному классу. Определить, к какому классу относится конкретный объект,
# позволяет функция type():

hello = 'Hello World!'
print(type(hello))  # <class 'str'>

my_list = [2, 4, 43]
print(type(my_list))  # <class 'list'>
print(type(True))  # <class 'bool'>
print(type(3))  # <class 'int'>
print(type(6 / 3))  # <class 'float'>
# ------------

# Проверить принадлежность объекта к определенному классу поможет функция isinstance():

hello = 'Hello World!'
print(hello, 'Это строка?', isinstance(hello, str))  # Hello World! Это строка? True
print(hello, 'Это bool?', isinstance(hello, bool))  # Hello World! Это bool? False

my_list = [2, 4, 43]
print(my_list, 'Это список?', isinstance(my_list, list))  # [2, 4, 43] Это список? True

print(25, 'Это список?', isinstance(25, list))  # 25 Это список? False
print(25, 'Это целое число?', isinstance(25, int))  # 25 Это целое число? True

print(25, 'Это объект?', isinstance(25, object))  # 25 Это объект? True
print(hello, 'Это объект?', isinstance(hello, object))  # Hello World! Это объект? True
print(my_list, 'Это объект?', isinstance(my_list, object))  # [2, 4, 43] Это объект? True


# -------------------------------
# Создание своего класса:

class Car:
    pass


# ------------

# К классу можно добавить строку документации для понимания поведения класса:
class Car:
    "Класс для определения характеристик машин"
    pass


print(Car.__doc__)  # Класс для определения характеристик машин


# Экземпляр класса (далее ЭК) — это объект, созданный на основании класса. Для того чтобы создать ЭК, необходимо
# вызвать класс. Результатом вызова класса является ЭК, который можно сохранить в переменную:

class Car:
    pass


a = Car()
b = Car()

print(type(a))  # <class '__main__.Car'>
print(type(b))  # <class '__main__.Car'>

print('Это объект принадлежит классу Car?', isinstance(a, Car))  # 'Это объект принадлежит классу Car?', True
print('Это объект принадлежит классу Car?', isinstance(b, Car))  # 'Это объект принадлежит классу Car?', True
print('Это объект принадлежит классу Car?', isinstance('hello', Car))  # 'Это объект принадлежит классу Car?', False


# ------------
# Мы можем также проверить, что переменные имеют разные идентификаторы и занимают разные участки памяти, что говорит о
# том, что это разные объекты:

class Car:
    pass


a = Car()
b = Car()

print(id(a), a)  # 2191678169664 <__main__.Car object at 0x000001FE4A32E240>
print(id(b), b)  # 2191678169760 <__main__.Car object at 0x000001FE4A32E2A0>


# ------------
# Добавление атрибутов в класс:
class Car:
    model = "BMW"
    engine = 1.6


a = Car()
b = Car()

print(a.model)  # BMW
print(b.model)  # BMW

# ------------
# Теперь при создании у каждого ЭК есть свои данные, к которым можно обращаться.

# Нужно понимать, что на данном этапе атрибуты model и engine являются  общими и одинаковыми для всех ЭК класса Car.
# Мы можем изменить значение атрибута в ЭК, применив следующую конструкцию:

b.model = "VAZ"  # Изменяем значение атрибута model в ЭК
b.color = 'white'  # Добавляем новый атрибут в ЭК
print(b.model, b.color)  # VAZ white


